version: '3.7'

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - type: volume
        source: data
        target: /usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 15s
      timeout: 3s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    container_name: kibana
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elk/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 15s
      timeout: 3s
      retries: 5

#  logstash:
#    image: docker.elastic.co/logstash/logstash:7.6.2
#    container_name: logstash
#    entrypoint: /usr/share/logstash/logstash-entrypoint.sh
#    environment:
#      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#    volumes:
#      - ./elk/logstash.yml:/usr/share/logstash/config/logstash.yml
#      - ./elk/elasticsearch-template.json:/usr/share/logstash/config/elasticsearch-template.json
#      - ./elk/pipeline:/usr/share/logstash/pipeline:ro
#      - ./elk/logstash-entrypoint.sh:/usr/share/logstash/logstash-entrypoint.sh
#      - ./wait-for-it.sh:/usr/share/logstash/wait-for-it.sh
#    ports:
#      - 9600:9600
#    networks:
#      - elk
#    healthcheck:
#      start_period: 30s
#      test: ["CMD", "curl", "-f", "http://localhost:9600"]
#      interval: 15s
#      timeout: 3s
#      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "curl", "-f", "http://localhost:2181"]
      interval: 15s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9095:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9095
      KAFKA_LISTENERS: LISTENER_KAFKA://kafka:9095
      KAFKA_ADVERTISED_LISTENERS: LISTENER_KAFKA://kafka:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_KAFKA:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_KAFKA
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "newsler-news-crawler:1:1, newsler-twitter-crawler:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka/data/1:/kafka
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "curl", "-f", "http://localhost:9095"]
      interval: 15s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      - MONGO_INITDB_DATABASE=Newsler
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword
    volumes:
      - type: volume
        source: mongodb-data
        target: /data/db
    ports:
      - 27017:27017
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/Newsler --quiet
      interval: 15s
      timeout: 3s
      retries: 5

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    entrypoint: /usr/local/bin/mongo-express-entrypoint.sh
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: rootpassword
    volumes:
      - ./elk/mongo-express-entrypoint.sh:/usr/local/bin/mongo-express-entrypoint.sh
    ports:
      - 8081:8081
    networks:
      - elk

  news-crawler:
    build:
      context: news-crawler
    image: news-crawler
    container_name: news-crawler
    volumes:
      - type: volume
        source: news-data
        target: /usr/src/app/data
      - type: volume
        source: news-logs
        target: /usr/src/app/logs
      - ./wait-for-it.sh:/usr/src/app/wait-for-it.sh
    networks:
      - elk

  twitter-crawler:
    build:
      context: twitter-crawler
    image: twitter-crawler
    container_name: twitter-crawler
    env_file:
      - twitter-crawler/.env
    volumes:
      - type: volume
        source: twitter-data
        target: /usr/src/app/data
      - type: volume
        source: twitter-logs
        target: /usr/src/app/logs
      - ./wait-for-it.sh:/usr/src/app/wait-for-it.sh
    networks:
      - elk

  connector:
    build:
      context: connector
    image: connector
    container_name: connector
    volumes:
      - type: volume
        source: connector-data
        target: /usr/src/app/data
      - type: volume
        source: connector-logs
        target: /usr/src/app/logs
      - ./wait-for-it.sh:/usr/src/app/wait-for-it.sh
    networks:
      - elk

volumes:
  data:
    driver: local
  news-data:
    driver: local
  news-logs:
    driver: local
  twitter-data:
    driver: local
  twitter-logs:
    driver: local
  connector-data:
    driver: local
  connector-logs:
    driver: local
  mongodb-data:
    driver: local

networks:
  elk:
    driver: bridge
