version: '3.7'

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - type: volume
        source: data
        target: /usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 15s
      timeout: 3s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    container_name: kibana
    depends_on:
      - elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elk/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 15s
      timeout: 3s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:7.6.2
    container_name: logstash
    entrypoint: /usr/share/logstash/logstash-entrypoint.sh
    depends_on:
      - elasticsearch
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - ./elk/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./elk/elasticsearch-template.json:/usr/share/logstash/config/elasticsearch-template.json
      - ./elk/pipeline:/usr/share/logstash/pipeline:ro
      - ./mongo/logstash-entrypoint.sh:/usr/share/logstash/logstash-entrypoint.sh
      - ./wait-for-it.sh:/usr/share/logstash/wait-for-it.sh
    ports:
      - 9600:9600
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 15s
      timeout: 3s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ['CMD', '/bin/bash', '-c', 'echo "ruok" | nc -w 2 -q 2 localhost 2181 | grep imok']
      interval: 15s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9095
      KAFKA_LISTENERS: LISTENER_KAFKA://kafka:9095
      KAFKA_ADVERTISED_LISTENERS: LISTENER_KAFKA://kafka:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_KAFKA:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_KAFKA
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "newsler-news-crawler:1:1, newsler-twitter-crawler:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./wait-for-it.sh:/usr/src/app/wait-for-it.sh
      - ./kafka/data/1:/kafka
      - ./kafka/kafka-healthcheck.sh:/bin/kafka-healthcheck.sh
    ports:
      - "9095:9092"
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD-SHELL", "/bin/kafka-healthcheck.sh"]
      interval: 30s
      timeout: 20s
      retries: 5

  mongo:
    image: mongo:4.2.6
    container_name: mongo
    environment:
      - MONGO_INITDB_DATABASE=Newsler
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword
    volumes:
      - type: volume
        source: mongodb-data
        target: /data/db
    ports:
      - 27017:27017
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/Newsler --quiet
      interval: 15s
      timeout: 3s
      retries: 5

  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    entrypoint: /usr/local/bin/mongo-express-entrypoint.sh
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: rootpassword
    volumes:
      - ./mongo/mongo-express-entrypoint.sh:/usr/local/bin/mongo-express-entrypoint.sh
    ports:
      - 8081:8081
    networks:
      - elk

  news-crawler:
    build:
      context: news-crawler
    image: news-crawler
    container_name: news-crawler
    environment:
      NEWS_INTERVAL_SECS: 60
      KAFKA_ENDPOINT: kafka:9095
      KAFKA_NEWS_TOPIC: newsler-news-crawler
      LOGGING_LEVEL: INFO
    volumes:
      - type: volume
        source: news-logs
        target: /usr/src/app/logs
      - ./wait-for-it.sh:/usr/src/app/wait-for-it.sh
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "/usr/local/bin/supervisorctl", "status", "all"]
      interval: 15s
      timeout: 5s
      retries: 5

  twitter-crawler:
    build:
      context: twitter-crawler
    image: twitter-crawler
    container_name: twitter-crawler
    env_file:
      - twitter-crawler/.env
    environment:
      KAFKA_ENDPOINT: "kafka:9095"
      KAFKA_TWITTER_TOPIC: "newsler-twitter-crawler"
    volumes:
      - type: volume
        source: twitter-logs
        target: /usr/src/app/logs
      - ./wait-for-it.sh:/usr/src/app/wait-for-it.sh
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "/usr/local/bin/supervisorctl", "status", "all"]
      interval: 15s
      timeout: 5s
      retries: 5

  connector:
    build:
      context: connector
    image: connector
    container_name: connector
    environment:
      CONSUMER_INTERVAL_SECS: 30
      KAFKA_ENDPOINT: "kafka:9095"
      KAFKA_NEWS_TOPIC: "newsler-news-crawler"
      KAFKA_TWITTER_TOPIC: "newsler-twitter-crawler"
      MONGO_HOST: "mongo"
      MONGO_PORT: 27017
      MONGO_DATABASE: "Newsler"
      MONGO_USERNAME: "root"
      MONGO_PASSWORD: "rootpassword"
    volumes:
      - type: volume
        source: connector-logs
        target: /usr/src/app/logs
      - ./wait-for-it.sh:/usr/src/app/wait-for-it.sh
    networks:
      - elk
    healthcheck:
      start_period: 30s
      test: ["CMD", "/usr/local/bin/supervisorctl", "status", "all"]
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  data:
    driver: local
  mongodb-data:
    driver: local
  news-logs:
    driver: local
  twitter-logs:
    driver: local
  connector-logs:
    driver: local

networks:
  elk:
    driver: bridge
